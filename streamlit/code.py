import streamlit as st
import pandas as pd
import numpy as np
import joblib
import io
from sklearn.preprocessing import StandardScaler

from rdkit.Chem import PandasTools
import numpy as np
import pandas as pd
from rdkit import DataStructs
from rdkit.Chem import AllChem as Chem
from rdkit.Chem import Draw
from rdkit.Chem import Descriptors
from rdkit.ML.Descriptors import MoleculeDescriptors
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn
from sklearn import metrics
from sklearn.metrics import accuracy_score
from sklearn.utils import shuffle
import random
from sklearn.ensemble import ExtraTreesRegressor
from sklearn.ensemble import ExtraTreesClassifier
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_validate
from sklearn.model_selection import LeaveOneOut
from sklearn import preprocessing
# from genetic_selection import GeneticSelectionCV
from mordred import Calculator, descriptors

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
@st.cache_resource
def load_models(ficha):
    try:
        if ficha == "a":
            model_a = joblib.load('../streamlit/model_a2.pkl')
            return model_a
        if ficha == "b":
            model_b = joblib.load('../streamlit/model_b2.pkl')
            return model_b
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π: {e}")
        return None, None
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏—á–µ–π 
@st.cache_resource
def load_scalers(ficha):
    try:
        if ficha == "a":
            feature_a = joblib.load('../streamlit/features_a2.pkl')
            return feature_a
        if ficha == "b":
            feature_b = joblib.load('../streamlit/features_b2.pkl')
            return feature_b
    except:
        return None, None
    
def calculate_descriptors_for_molecule(smiles, prefix=""):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã Mordred –¥–ª—è –æ–¥–Ω–æ–≥–æ SMILES
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict —Å –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–∞–º–∏ –∏–ª–∏ None –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
    """
    if pd.isna(smiles):
        return None
        
    try:
        mol = Chem.MolFromSmiles(str(smiles))
        if mol is None:
            return None
            
        # –°–æ–∑–¥–∞–µ–º 3D —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        mol_3d = Chem.AddHs(mol)
        Chem.EmbedMolecule(mol_3d, randomSeed=0xf006d)
        
        try:
            Chem.MMFFOptimizeMolecule(mol_3d)
        except:
            pass
            
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã
        calc = Calculator(descriptors)
        desc_dict = calc(mol_3d)
        
        # –°–û–•–†–ê–ù–Ø–ï–ú NaN –∑–Ω–∞—á–µ–Ω–∏—è 
        numeric_descriptors = {}
        for key, value in desc_dict.items():
            try:
                float_value = float(value)
                numeric_descriptors[f"{prefix}{key}"] = float_value
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –í–°–ï —á–∏—Å–ª–∞, –≤–∫–ª—é—á–∞—è nan –∏ inf
            except (ValueError, TypeError):
                # –û—Ç—Å–µ–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—Å—Ç–æ—è—â–∏–µ –æ—à–∏–±–∫–∏
                continue
                
        return numeric_descriptors
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –¥–ª—è SMILES {smiles}: {e}")
        return None

def process_reactions(data):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ä–µ–∞–∫—Ü–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç DataFrame —Å –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–∞–º–∏
    """
    all_descriptors = []
    
    for idx, reaction_smiles in enumerate(data['SMILES']):
        if pd.isna(reaction_smiles):
            all_descriptors.append({})
            continue
        
        print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∞–∫—Ü–∏–∏ {idx+1}/{len(data)}: {reaction_smiles}")
        
        reaction_descriptors = {}
        
        if '>>' in str(reaction_smiles):
            # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —Ä–µ–∞–≥–µ–Ω—Ç—ã –∏ –ø—Ä–æ–¥—É–∫—Ç—ã
            reagents_part, products_part = reaction_smiles.split('>>')
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∞–≥–µ–Ω—Ç—ã
            reagents = [r.strip() for r in reagents_part.split('.') if r.strip()]
            for i, reagent in enumerate(reagents):
                prefix = f"reagent{i+1}_"
                desc_dict = calculate_descriptors_for_molecule(reagent, prefix)
                if desc_dict:
                    reaction_descriptors.update(desc_dict)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã
            products = [p.strip() for p in products_part.split('.') if p.strip()]
            for i, product in enumerate(products):
                prefix = f"product{i+1}_"
                desc_dict = calculate_descriptors_for_molecule(product, prefix)
                if desc_dict:
                    reaction_descriptors.update(desc_dict)
        
        all_descriptors.append(reaction_descriptors)
    print ("–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
    return all_descriptors

# –í–∞—à–∏ –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
def preprocess_data(raw_df, ficha, n):
    try:
        all_desc_data = process_reactions(raw_df) # —Ç—É–ø–æ –≤—Å–µ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã 
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –≤ DataFrame
        desc_df = pd.DataFrame(all_desc_data)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏—á–∏ –ø–æ–¥ –∑–∞–ø—Ä–æ—Å
        features = load_scalers(ficha)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–µ —Ñ–∏—á–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –¥–∞–Ω–Ω—ã—Ö
        available_features = [f for f in features[:n] if f in desc_df.columns]
        
        if len(available_features) == 0:
            st.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö")
            return None
            
        # –û—Ç–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        selected_data = desc_df[available_features]
        
        st.success(f"‚úÖ –û—Ç–æ–±—Ä–∞–Ω–æ {len(available_features)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ {n} –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã—Ö")
        
        return selected_data
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def main():

    st.title("üìä ML Models with SMILES Upload")
    st.write("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")

    if 'processed_data' not in st.session_state:
        st.session_state.processed_data = None
    if 'raw_data' not in st.session_state:
        st.session_state.raw_data = None
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    st.sidebar.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏")
    
    # –í—ã–±–æ—Ä –∑–∞–¥–∞–Ω–∏—è 
    target_choice = st.sidebar.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:",
        ["a", "b"],
        help="–ù–∞–∑–≤–∞–Ω–∏—è –ø–æ–¥–æ–±—Ä–∞–Ω—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å–∏–≤–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ ChemDraw"
    )

    # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω—É–∂–Ω–æ–π –º–æ–¥–µ–ª–∏
    model = load_models(target_choice)    
    if model is None:
        st.error("–ú–æ–¥–µ–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã –º–æ–¥–µ–ª–µ–π.")
        return
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    st.header("1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å–æ SMILES")
    uploaded_file = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏", 
        type=['csv', 'xlsx', 'xls'],
        help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: CSV, Excel. –í —Ñ–∞–π–ª–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–æ–ª–æ–Ω–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º 'SMILES', –ø–æ–¥ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥—É—Ç –¥–∞–Ω–Ω—ã–µ. " \
        "–ü–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è, —á—Ç–æ –≤ SMILES –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω–∞ –≤—Å—è —Ä–µ–∞–∫—Ü–∏—è: 2 –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ 1 –≤—ã—Ö–æ–¥"
    )
    
    raw_data = None
    processed_data = None
    
    if uploaded_file is not None:
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º
            if uploaded_file.name.endswith('.csv'):
                raw_data = pd.read_csv(uploaded_file)
            else:
                raw_data = pd.read_excel(uploaded_file)
            
            st.success(f"–§–∞–π–ª {uploaded_file.name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            st.header("2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
            if st.button("–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", type="primary"):
                with st.spinner("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–∞–Ω–Ω—ã–µ..."):
                    processed_data = preprocess_data(raw_data, target_choice, 30)
                    st.session_state.processed_data = processed_data  #  –°–û–•–†–ê–ù–Ø–ï–ú –í SESSION STATE
                    st.session_state.raw_data = raw_data  #  –°–û–•–†–ê–ù–Ø–ï–ú –í SESSION STATE
                    if processed_data is not None:
                        with st.expander("üîß –ü—Ä–æ—Å–º–æ—Ç—Ä –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"):
                            st.write(f"–†–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processed_data.shape[0]} —Å—Ç—Ä–æ–∫, {processed_data.shape[1]} –∫–æ–ª–æ–Ω–æ–∫")
                            st.dataframe(processed_data.head())
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
    
    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    st.header("3. –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ")

    processed_data = st.session_state.processed_data  #  –î–û–°–¢–ê–ï–ú –ò–ó SESSION STATE
    raw_data = st.session_state.raw_data  #  –î–û–°–¢–ê–ï–ú –ò–ó SESSION STATE

    print (f"–Ω–∞—à–∏ –¥–∞–Ω–Ω—ã–µ --- {processed_data}")
    if processed_data is not None:
        
        if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ", type="primary"):
            try:
                with st.spinner("–í—ã–ø–æ–ª–Ω—è—é –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ..."):

                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å 
                    predictions = model.predict(processed_data)

                    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    st.success("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∫ –¥–∞–Ω–Ω—ã–º
                    results_df = processed_data.copy()
                    results_df['Predicted'] = predictions
                    results_df['SMILES'] = raw_data['SMILES']
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    st.subheader("üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
                    st.dataframe(results_df[['SMILES', 'Predicted']])

                    
                    # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                    csv = results_df.to_csv(index=False)
                    st.download_button(
                        label="üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (CSV)",
                        data=csv,
                        file_name=f"smiles_predictions_{target_choice}.csv",
                        mime="text/csv"
                    )
                    
                    
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏: {e}")
                st.info("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º –º–æ–¥–µ–ª–∏")
    
    else:
        st.info("üëÜ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∏ –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
    
if __name__ == "__main__":
    main()
